apply plugin: 'com.android.application'


android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.riobener.audiostudio"

        // NOTE: the value of minSdkVersion is used by the native build as the target APP_PLATFORM
        // meaning the app will not run on devices with an older Android version! The minimum supported SDK
        // version for com.riobener.audiostudio.MWEngine is 16 (Jelly Bean/4.1). While support of AAudio was only added in version 26 (Oreo/8),
        // we can still provide AAudio by loading it at runtime when the device supports it. You can
        // thus set the value of minSdkVersion to whatever fits your use case.

        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"
        }

        externalNativeBuild {

            // List of potential arguments: https://developer.android.com/ndk/guides/cmake.html

            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_STL=c++_static"

                // AAudio support requires minSdkVersion 26 onwards. We can load libaaudio.so
                // at runtime on devices that support it. If minSdkVersion is equal to or above
                // version 26, we can include the library at compilation and omit runtime loading.

                arguments "-DINCLUDE_AAUDIO_LIBRARY=" + ( minSdkVersion.getApiLevel() >= 26 ).toString()



                cFlags   "-O3"
                cppFlags "-std=c++14 -Werror -Wno-deprecated-declarations -fexceptions -frtti"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    if ( project.hasProperty( "RELEASE_STORE_FILE" )) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if ( project.hasProperty( "RELEASE_STORE_FILE" )) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}



allprojects {
    repositories {
        google()
        jcenter()
    }
}

def getRunTests() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())
    return properties.getProperty('enable_tests', 'false').toBoolean().toString()
}
